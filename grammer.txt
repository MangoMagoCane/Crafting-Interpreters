--expressions:

expression      → comma ;
nonCommaExpr    → lambdaNonComma ;
lambdaNonComma  → ( parameters | "(" parameters? ")" ) "=>" ( expression | block )
                | assignment ;
lambda          → ( parameters | "(" parameters? ")" ) "=>" ( expression | block )
                | comma ;
comma           → assignment ( "," assignment )* ;
assignment      → IDENTIFIER "=" assignment
                | logical_or ;
logical_or      → logical_and ( "or" logical_and )* ;
logical_and     → ternaryRL ( "and" ternaryRL )* ;
ternaryRL       → ternaryLR "?" ternaryLR ":" ternaryRL
                | ternaryLR ;                                    (C)
ternaryLR       → equality ( "?." equality ":" equality )* ;     (php)
equality        → comparison ( ( "!=" | "==" ) comparison )* ;
comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            → factor ( ( "-" | "+" ) factor )* ;
factor          → unary ( ( "/" | "*" ) unary )* ;
unary           → ( "!" | "-" ) unary | call ;
call            → primary ( "(" arguments? ")" )* ;
primary         → NUMBER | STRING | "true" | "false" | "nil"
                | "(" expression ")"
                | IDENTIFIER ;

--declarations:

program         → declaration* EOF ;
declaration     → funDecl
                | varDecl
                | statement ;
funDecl         → "fun" function ;
varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;

--statements:

statement       → exprStmt
                | block
                | ifStmt
                | forStmt
                | whileStmt
                | loopControlStmt
                | returnStmt
                | printStmt
                | prinSexprtStmt ;
exprStmt        → expression ";" ;
block           → "{" declaration* "}" ;
ifStmt          → "if" "(" expression ")" statement
                ( "else" statement )? ;
forStmt         → "for" "("
                  ( varDecl | exprStmt | ";" )
                  expression? ";"
                  expression? ")" statement ;
whileStmt       → "while" "(" expression ")" statement ;
loopControlStmt → ( "break" | "continue" ) ";" ;
returnStmt      → "return" expression? ";" ;
printStmt       → "print" expression ";" ; // print has been written out.
printSexprStmt  → "printSexpr" expression ";" ;

--utility:

function       → IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
arguments      → nonCommaExpr ( "," nonCommaExpr )* ;
